// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum RoomStatus {
    Lobby
    Started
    Done
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String              @id @default(cuid())
    name               String?
    email              String?             @unique
    emailVerified      DateTime?
    image              String?
    accounts           Account[]
    sessions           Session[]
    currentTurnRooms   Room[]
    ownedRooms         Room[]              @relation(name: "OwnedRoom")
    landPartitions     LandPartition[]
    landPartitionVotes LandPartitionVote[]
    currentRoomId      String?
    currentRoom        Room?               @relation(fields: [currentRoomId], references: [id], onDelete: Cascade, name: "CurrentRoom")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id                String          @id @default(cuid())
    name              String
    status            RoomStatus      @default(Lobby)
    ownerId           String
    owner             User            @relation(fields: [ownerId], references: [id], onDelete: Cascade, name: "OwnedRoom")
    users             User[]          @relation(name: "CurrentRoom")
    currentTurnUserId String?
    currentTurnUser   User?           @relation(fields: [currentTurnUserId], references: [id], onDelete: Cascade)
    landPartitions    LandPartition[]
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @default(now()) @updatedAt()
}

model LandPartition {
    id       String              @id @default(cuid())
    edges    Json
    isActive Boolean
    ownerId  String
    owner    User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    roomId   String
    room     Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
    votes    LandPartitionVote[]
}

model LandPartitionVote {
    id              String        @id @default(cuid())
    ownerId         String
    owner           User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    landPartitionId String
    landPartition   LandPartition @relation(fields: [landPartitionId], references: [id], onDelete: Cascade)
}
